service: job-nest-crud-api

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1
  apiName: ${self:service}
  memorySize: 128 # mb
  timeout: 10 # seconds
  environment:
    JOB_POSTS_TABLE_NAME: ${self:custom.jobPostsTableName}


custom:
  jobPostsTableName: job-posts-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getJobPost:
    handler: job_posts/jobPostAPI.getJobPost
    name: get-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: job-post/{jobPostId}
          method: GET
    role: LabRole  # Assigning LabRole to all functions
  createJobPost:
    handler: job_posts/jobPostAPI.createJobPost
    name: create-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    role: LabRole  # Assigning LabRole to all functions
  updateJobPost:
    handler: job_posts/jobPostAPI.updateJobPost
    name: update-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: job-post/{jobPostId}
          method: PUT
    role: LabRole  # Assigning LabRole to all functions
  deleteJobPost:
    handler: job_posts/jobPostAPI.deleteJobPost
    name: delete-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: job-post/{jobPostId}
          method: DELETE
    role: LabRole  # Assigning LabRole to all functions
  getAllJobPosts:
    handler: job_posts/jobPostAPI.getAllJobPosts
    name: get-all-job-posts
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
    role: LabRole  # Assigning LabRole to all functions

resources:
  Resources:
    LabRole:
      Type: AWS::IAM::Role
      DeletionPolicy: Retain
      Properties:
        RoleName: LabRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
                  - application-autoscaling.amazonaws.com
                  - athena.amazonaws.com
                  - autoscaling.amazonaws.com
                  - batch.amazonaws.com
                  - backup.amazonaws.com
                  - cloud9.amazonaws.com
                  - cloudformation.amazonaws.com
                  - cloudfront.amazonaws.com
                  - cloudtrail.amazonaws.com
                  - codecommit.amazonaws.com
                  - codedeploy.amazonaws.com
                  - codewhisperer.amazonaws.com
                  - cognito-idp.amazonaws.com
                  - credentials.iot.amazonaws.com
                  - databrew.amazonaws.com
                  - datapipeline.amazonaws.com
                  - deepracer.amazonaws.com
                  - dynamodb.amazonaws.com
                  - ec2.amazonaws.com
                  - ec2.application-autoscaling.amazonaws.com
                  - ecs.amazonaws.com
                  - ecs-tasks.amazonaws.com
                  - eks.amazonaws.com
                  - eks-fargate-pods.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - elasticfilesystem.amazonaws.com
                  - elasticloadbalancing.amazonaws.com
                  - elasticmapreduce.amazonaws.com
                  - events.amazonaws.com
                  - firehose.amazonaws.com
                  - forecast.amazonaws.com
                  - glue.amazonaws.com
                  - iot.amazonaws.com
                  - iotanalytics.amazonaws.com
                  - iotevents.amazonaws.com
                  - kendra.amazonaws.com
                  - kinesis.amazonaws.com
                  - kinesisanalytics.amazonaws.com
                  - kms.amazonaws.com
                  - lambda.amazonaws.com
                  - lex.amazonaws.com
                  - logs.amazonaws.com
                  - personalize.amazonaws.com
                  - pipes.amazonaws.com
                  - quicksight.amazonaws.com
                  - rds.amazonaws.com
                  - redshift.amazonaws.com
                  - rekognition.amazonaws.com
                  - resource-groups.amazonaws.com
                  - robomaker.amazonaws.com
                  - s3.amazonaws.com
                  - sagemaker.amazonaws.com
                  - scheduler.amazonaws.com
                  - secretsmanager.amazonaws.com
                  - servicecatalog.amazonaws.com
                  - sns.amazonaws.com
                  - sqs.amazonaws.com
                  - ssm.amazonaws.com
                  - states.amazonaws.com
                  - storagegateway.amazonaws.com
              Action:
                - sts:AssumeRole
    JobPostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.jobPostsTableName}
        AttributeDefinitions:
          - AttributeName: jobPostId
            AttributeType: S
        KeySchema:
          - AttributeName: jobPostId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
