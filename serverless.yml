service: job-nest-crud-api

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1
  apiName: ${self:service}
  memorySize: 128 # mb
  timeout: 10 # seconds
  environment:
    JOB_POSTS_TABLE_NAME: ${self:custom.jobPostsTableName}

custom:
  jobPostsTableName: job-posts-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getJobPost:
    handler: job_posts/jobPostAPI.getJobPost
    name: get-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: job-post/{jobPostId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt JobPostsTable.Arn
  createJobPost:
    handler: job_posts/jobPostAPI.createJobPost
    name: create-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt JobPostsTable.Arn
  updateJobPost:
    handler: job_posts/jobPostAPI.updateJobPost
    name: update-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: job-post/{jobPostId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt JobPostsTable.Arn
  deleteJobPost:
    handler: job_posts/jobPostAPI.deleteJobPost
    name: delete-job-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: job-post/{jobPostId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt JobPostsTable.Arn
  getAllJobPosts:
    handler: job_posts/jobPostAPI.getAllJobPosts
    name: get-all-job-posts
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt JobPostsTable.Arn

resources:
  Resources:
    JobPostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.jobPostsTableName}
        AttributeDefinitions:
          - AttributeName: jobPostId
            AttributeType: S
        KeySchema:
          - AttributeName: jobPostId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
